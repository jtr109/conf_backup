set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
" call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.

" Nerdtree
Plugin 'scrooloose/nerdtree'
let NERDTreeWinPos='left'
let NERDTreeWinSize=30
map <F2> :NERDTreeToggle<CR>

" Vim-airline
" Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
" 底端显示两行
set laststatus=2
let g:airline_theme='simple'
let g:airline_powerline_fonts=1
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" markdown 目录自动生成
Plugin 'mzlogin/vim-markdown-toc'

" PEP8 indent
Plugin 'vim-scripts/indentpython.vim'

" Python auto complete
Plugin 'Valloric/YouCompleteMe'
" 确保了在你完成操作之后，自动补全窗口不会消失
let g:ycm_autoclose_preview_window_after_completion=1
" 定义了“转到定义”的快捷方式
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>


" 通过安装syntastic插件，每次保存文件时Vim都会检查代码的语法：
Plugin 'scrooloose/syntastic'
" 还可以通过这个小巧的插件，添加PEP8代码风格检查：
Plugin 'nvie/vim-flake8'
" 最后，让你的代码变得更漂亮：
let python_highlight_all=1
" syntax on

" vim-coffee-script
" vim coffee script 在 vudle 管理下有一个 bug
" 没法将 *.coffee 等文件的 filetype 设置为 coffee
" 手动添加以下配置即可
autocmd BufNewFile,BufRead *.coffee set filetype=coffee
autocmd BufNewFile,BufRead *Cakefile set filetype=coffee
autocmd BufNewFile,BufRead *.coffeekup,*.ck set filetype=coffee
autocmd BufNewFile,BufRead *.litcoffee set filetype=litcoffee
autocmd BufNewFile,BufRead *.coffee.md set filetype=litcoffee
" Plugin 主体
Plugin 'kchmck/vim-coffee-script'
" syntax on
" filetype plugin indent on

" vim 全局搜索工具 ack.vim
" 用法详见 Ack 官方文档: https://beyondgrep.com/documentation/
Plugin 'mileszs/ack.vim'

" ctrlp.vim 全局文件跳转插件
Plugin 'kien/ctrlp.vim'
" ctrlp 配置:
" - Change the default mapping and the default command to invoke CtrlP:
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
" - When invoked, unless a starting directory is specified, CtrlP will set its
" local working directory according to this variable:
let g:ctrlp_working_path_mode = 'ra'
" 'c' - the directory of the current file.
" 'r' - the nearest ancestor that contains one of these directories or files:
" .git .hg .svn .bzr _darcs
" 'a' - like c, but only if the current working directory outside of CtrlP is
" not a direct ancestor of the directory of the current file.
" 0 or '' (empty string) - disable this feature.
" Define additional root markers with the g:ctrlp_root_markers option.
" - Exclude files and directories using Vim's wildignore and CtrlP's own
" `g:ctrlp_custom_ignore`:
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
set wildignore+=*/node_modules/*,*/DS_Store/*
" set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows
set wildignore+=*.pyc " For coding
" let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
  \ }
" - Use a custom file listing command:
" let g:ctrlp_user_command = 'find %s -type f'        " MacOSX/Linux
" let g:ctrlp_user_command = 'dir %s /-n /b /s /a-d'  " Windows
" The maximum number of files to scan, set to 0 for no limit:
let g:ctrlp_max_files = 0
" *'g:ctrlp_lazy_update'*
" Set this to 1 to enable the lazy-update feature: only update the match
" window after typing's been stopped for a certain amount of time:
let g:ctrlp_lazy_update = 1
" " Command to clear all ctrlp cache
" "  *:CtrlPClearAllCaches*
" " Delete all the cache files saved in |g:ctrlp_cache_dir| location.
" :CtrlPClearAllCaches
" syntax on

" filetype and syntax highlight support for vue
Plugin 'posva/vim-vue'

Plugin 'majutsushi/tagbar'
nmap <F3> :TagbarToggle<CR>
map <F12> :!ctags -R --languages=python --exclude={.git,node_modules} .<CR>  

Plugin 'alvan/vim-closetag'
" filenames like *.xml, *.html, *.xhtml, ...
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.vue"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line




""" unicode symbols """

" let g:airline_left_sep = '»'
" let g:airline_left_sep = '▶'
" let g:airline_right_sep = '«'
" let g:airline_right_sep = '◀'
let g:airline_symbols.crypt = '🔒'
" let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
" let g:airline_symbols.linenr = '¶'
let g:airline_symbols.maxlinenr = '☰'
" let g:airline_symbols.maxlinenr = ''
" let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
" let g:airline_symbols.paste = 'Þ'
" let g:airline_symbols.paste = '∥'
let g:airline_symbols.spell = 'Ꞩ'
let g:airline_symbols.notexists = '∄'
let g:airline_symbols.whitespace = 'Ξ'

" " powerline symbols
" let g:airline_left_sep = ''
" let g:airline_left_alt_sep = ''
" let g:airline_right_sep = ''
" let g:airline_right_alt_sep = ''
" let g:airline_symbols.branch = ''
" let g:airline_symbols.readonly = ''
" let g:airline_symbols.linenr = ''
" 
" " old vim-powerline symbols
let g:airline_left_sep = '⮀'
let g:airline_left_alt_sep = '⮁'
let g:airline_right_sep = '⮂'
let g:airline_right_alt_sep = '⮃'
let g:airline_symbols.branch = '⭠'
let g:airline_symbols.readonly = '⭤'

